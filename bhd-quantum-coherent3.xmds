<?xml version="1.0" encoding="UTF-8"?>

<simulation xmds-version="2">
<name> bhd-quantum-coherent3 </name>

<author> Ryan Kidd </author>
<description>
	The Bose-Hubbard model for the driven dimer in initial SU(2) coherent (Bloch) state with 1000 total particles. This script evolves two initially identical quantum states in the number state basis under slightly perturbed Hamiltonians.
</description>

<features>
	<auto_vectorise />
	<benchmark />
	<openmp />
	<globals>
		<![CDATA[
			real Jt;
			real pchi;
			long n_plus_one;
			long n_minus_one;

			real bincoeff(int q, int r) {
    		real bc = log(1);

				if ( r > q - r )
        	r = q - r;

    		for (int j = 0; j < r; j++) {
	        bc += log(q - j);
	        bc -= log(j + 1);
    		}
    		return bc;
			}
		]]>
	</globals>
	<validation kind="run-time" />
	<arguments>
		<argument name="chi" type="real" default_value = "-0.001" />
		<argument name="pert" type="real" default_value = "-0.0001" />
		<argument name="mu" type="real" default_value = "0.2" />
		<argument name="omega" type="real" default_value = "1.37" />
		<argument name="interval" type="real" default_value = "100" />
		<argument name="N" type="integer" default_value = "1000" />
		<![CDATA[
			pchi = chi*(1 + pert);
		]]>
	</arguments>
</features>

<geometry>
	<propagation_dimension> t </propagation_dimension>
	<transverse_dimensions>
		 <dimension name="n" type="integer" domain="(0,N)" />
		 <dimension name="z" lattice="30" domain="(-N,N)" />
		 <dimension name="phi" lattice="30" domain="(-0.5*M_PI,0.5*M_PI)" />
	</transverse_dimensions>
</geometry>

<vector name="state" type="complex" >
	<components> psi1 psi2 </components>
	<initialisation>
		<![CDATA[
			psi1 = exp(0.5*bincoeff(N,n) + n*log(sin(0.5*acos(z/N))) + (N-n)*log(cos(0.5*acos(z/N))) - i*n*phi);
			psi2 = psi1;
		]]>
	</initialisation>
</vector>

<vector name="H_elements" type="real" >
	<components> H_chi H_pchi H_J1 H_J2 </components>
	<initialisation>
		<![CDATA[
			H_chi = chi*(n*(n-1) + (N-n)*(N-n-1));
			H_pchi = pchi*(n*(n-1) + (N-n)*(N-n-1));
			H_J1 = sqrt(n*(N-n+1));
			H_J2 = sqrt((n+1)*(N-n));
		]]>
	</initialisation>
</vector>

<sequence>
	<integrate algorithm="ARK45" interval="interval" tolerance="1E-6">
		<samples> 1 </samples>
		<operators>
			<integration_vectors> state </integration_vectors>
			<dependencies> H_elements </dependencies>
			<![CDATA[
				Jt = 1 + mu*cos(omega*t);

				if (n > 0 && n < 1001) {
					n_plus_one = (n+1) % _lattice_n;
					n_minus_one = (n-1) % _lattice_n;
				}
				else if (n > 0) {
					n_plus_one = n % _lattice_n;
					n_minus_one = (n-1) % _lattice_n;
				}
				else {
					n_plus_one = (n+1) % _lattice_n;
					n_minus_one = n % _lattice_n;
				}

				dpsi1_dt = i*(-H_chi(n => n)*psi1(n => n) + Jt*(H_J1(n => n)*psi1(n => n_minus_one) + H_J2(n => n)*psi1(n => n_plus_one)));
				dpsi2_dt = i*(-H_pchi(n => n)*psi2(n => n) + Jt*(H_J1(n => n)*psi2(n => n_minus_one) + H_J2(n => n)*psi2(n => n_plus_one)));
			]]>
		</operators>
	</integrate>
</sequence>

<output format="hdf5" filename="bhd-quantum-coherent3.xsil">
	<sampling_group basis="z phi n" initial_sample="no">
		<moments> psi1_R psi1_I psi2_R psi2_I </moments>
		<dependencies> state </dependencies>
		<![CDATA[
			psi1_R = Re(psi1);
			psi1_I = Im(psi1);
			psi2_R = Re(psi2);
			psi2_I = Im(psi2);
			// overlap_R = Re(psi1*conj(psi2));
			// overlap_I = Im(psi1*conj(psi2));
		]]>
	</sampling_group>
</output>

</simulation>
